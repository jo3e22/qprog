Example Fortran 95, .doc and rubric files corresponding to CCFE-R(15)34
https://scientific-publications.ukaea.uk/wp-content/uploads/CCFE-R-1534.pdf
http://dx.doi.org/10.13140/RG.2.2.27018.41922

Subdirectories
doc produce latest version of CCFE-R(15)34 from f90 files, see README
TEST example .ctl and .dat files setting a .dat file as input

The script qprog.bash will set up a conforming program and try to run it,
it does not need SMARDDA installation if -l (for locally complete) is set as the first option.
The program name, its abbreviation (typically one or two letters) and description are defined using
the keys QPROG, Q and STR. The name of a skeleton module to be tested, its abbreviation
and description are defined using the keys BIGOBJ, BO and BSTR, as indicated:
qprog.bash [-l] \
QPROG=xpc Q=xp STR="transport_coefficients" \
BIGOBJ=clcoef BO=cc BSTR="classical_coefficients"
Notes
1. The above are the default key values and so may be omitted.
2. The use of underscores in the descriptions instead of spaces between words.
3. The contents of qprog.txt are used to define the INSTRUCTIONS for producing the 
different module objects, of which BIGOBJ will become the first.
4. The example is that of a code xpc to calculate transport coefficients
according to different physical models of a plasma, of which the so-called classical
or Braginskii coeefficients will be the first, as object clcoef.
5. Each new code should be developed in a physically distinct repo - do not develop
more than one code in a 'qprog' repo, and do not try to push files back to the original repo.

Files input
qprog.txt contains the input variables that might be used by a range of different objects/modules
and the default values for these inputs. These variables form part of the top level control QPROG_t
for the program. A human readable variable for use in
a namelist will be generated using the first 3 words of the description of each variable.
In the example, a=... to lambda=... will be copied to QPROG.txt (xpc.txt) and finish in QPROG_h.f90
bigobj.txt contains the variables defining one object which will normally be defined using the
instructions resulting from the input variables in qprog.txt, using additional object level controls
(and of course code to be written by the user).
In the example, tau_e... and c_tau_e... will be copied to BIGOBJ.txt (clcoef.txt)
and finish in BIGOBJ_h.f90.

Scratch files output
setvar.txt copy to internal variables from namelist variables
namvarinit.txt set default values for namelist variables
namvars.txt namelist variables as list, one per line
namvardecl.txt declare type of namelist variables
include.txt declare type of internal variables
spaced.txt scratch formatted version of qprog.txt and bigobj.txt inputs
copvar.txt copies (relevant) Qnumerics variables to BOnumerics
copvar0.txt copies (relevant) Qnumerics variables to BOnumerics

Files output and principal input functions as part of new QPROG (xpc) code
QPROG.f90 main program, calls QPROG_readcon (xpc_readcon) in module QPROG_m.f90
QPROG_h.f90 parameters describing (at least) how to construct first object BIGOBJ as
 Qnumerics_t (xpnumerics_t) which is to  be combined with other object data structures
 such as BIGOBJ_t into type QPROG_t
QPROG_m.f90 input from QPROGparameters (xpcparameters) in QPROG_readcon, with namelist variables as
 constructed from qprog.txt, copied to  Qnumerics_t, *will generally need editing by hand*.
QPROG_case0.ctl input file for QPROG containing complete list of namelists
Qcontrol_h.f90 data structure of generic top level controls for QPROG abbreviated to Q
Qcontrol_m.f90 object of generic top level controls for QPROG  abbreviated to Q, calls BIGOBJ_readcon
 via Qcontrol_read.
BIGOBJ_h.f90 data structure of controls for BIGOBJ in type BOnumerics_t combined into type BIGOBJ_t,
 may need editing by hand for more complex applications.
BIGOBJ_m.f90 reads in object level controls, *will generally need editing by hand*.
makefile.QPROG makefile to compile and link QPROG (xpc)

In one example, edits to QPROG_m.f90 are
(1) QPROG_dia to call sum_dia, 
(2) QPROG_write to list key input parameters to .out file
(3) QPROG_writeg to call BIGOBJ_writeg,
and edits to BIGOBJ_m.f90
(1) add to BIGOBJ_solve to do new work, 
(2) add to BIGOBJ_dia for new output to .log filet
(3) add to BIGOBJ_writeg to output to .gnu file

Outputs from execution of QPROG
xpc_case0.log log data such as date and time of run, cpu measured by internal clocks
xpc_case0_xpc.out indicative output, precisely object level controls for BIGOBJ

Subdirectories for QPROG executable production
config contains files to set compiler options, default gfortran compilation with debug option
develop for developer use, files and script to produce makefile
LIB fixed format style Fortran subroutine library

Subdirectory
srcdoc Documentation may be accessed from srcdoc/html/index.html, after executing
doxygen doxyfile
